import { SDSConnection } from "../sds/SDSConnection";
import { SDSResponse } from "../sds/SDSResponse";
import { SDSSimpleMessage } from "../sds/SDSSimpleMessage";
import { JANUSClass } from "./JANUSClass";
export declare class PDObject extends JANUSClass {
    private _oId;
    private _classId;
    private _className;
    private _isTransactional;
    constructor(sdsConnection: SDSConnection, _oId: string, classId?: number, className?: string);
    /** ID of the class */
    get classId(): number;
    /** Class name of the PD-Object */
    get className(): string;
    /** Indicates if an object is a transaction object or not */
    get isTransactional(): boolean;
    /** Object-ID of the PD-Object */
    get oId(): string;
    /**
     * Executes an operation on the JANUS-server
     * @todo This function is untested
     * @param operation Name of the operation
     * @param parameters The parameters of the operation
     * @param parametersPDO TODO
     * @returns Execution result of the operation
     */
    callOperation(operation: string, parameters?: string[], pdObjects?: PDObject[]): Promise<SDSSimpleMessage | SDSResponse>;
    /**
     * Executes an operation on the JANUS-server asynchronously
     * @todo This function is untested
     * @param operation Name of the operation
     * @param parameters The parameters of the operation
     * @param parametersPDO TODO
     */
    callOperationAsync(operation: string, parameters?: string[], pdObjects?: PDObject[]): Promise<void>;
    /**
     * Commits a transaction. Note: This operation has to be called from the transaction object
     * @param pdObject Newly created object
     */
    commitTransaction(pdObject: PDObject): Promise<void>;
    connect(relationName: string, connectTo: PDObject, lockId?: number): Promise<void>;
    /**
     * Counts all elements of the class of the PDObject
     * @param relationName
     * @param filter
     * @param otherPDObject
     */
    countObjects(relationName?: string, filter?: string, otherPDObject?: PDObject): Promise<number>;
    /**
     * Removes an open iterator
     * @param iteratorId
     */
    deleteIterator(iteratorId: number): Promise<void>;
    /**
     * Returns the value of an attribute
     * @param attributeName Name of the attribute
     * @returns Value of the attribute
     */
    getAttribute(attributeName: string): Promise<string>;
    /**
     * Returns true if the iterator points not to the last element of the iterator
     * @param iteratorId Id of the iterator
     */
    hasNext(iteratorId: number): Promise<boolean>;
    /**
     * Returns true if the iterator points not to the first element of the iterator
     * @param iteratorId Id of the Iterator
     */
    hasPrev(iteratorId: number): Promise<boolean>;
    /**
     * Creates a new PDIterator
     * @param relationName Relation name of to iterate on
     * @param filter Filter criteria
     * @param sort Sort criteria
     * @param pdObject PDObject the objects are related to
     * @returns The id of the iterator
     */
    newIterator(relationName?: string, filter?: string, sort?: string, otherPDObject?: PDObject): Promise<number>;
    /**
     * Moves the iterator to the first element
     * @param iteratorId Id of the iterator
     * @returns The first element of the iterator
     */
    seekFirst(iteratorId: number): Promise<PDObject | null>;
    /**
     * Moves the iterator to the next element
     * @param iteratorId Id of the iterator
     * @returns The next element of the iterator
     */
    seekNext(iteratorId: number): Promise<PDObject | null>;
    /**
     * Moves the iterator to the next element
     * @param iteratorId Id of the iterator
     * @param positionOrObject New position of the iterator or object to place the iterator on
     * @param offset Determines how to interpret the new position
     * @returns The element the iterator points on
     */
    seekObject(iteratorId: number, pdObject: PDObject): Promise<PDObject | null>;
    seekObject(iteratorId: number, position: number, offset: number): Promise<PDObject | null>;
    /**
     * Sets the value of an attribute
     * @param attributeName Name of the attribute
     * @param attributeValue Value of the attribute
     * @throws Error if the attribute could not be set
     */
    setAttribute(attributeName: string, attributeValue: string): Promise<void>;
    /**
     * Starts a new Transaction.
     * @param pdObject
     * @param lockId
     */
    startTransaction(pdObject: PDObject, lockId?: number): Promise<void>;
    /**
     * Executes a sync to persist changes made on the PDObject
     */
    sync(): Promise<void>;
    /**
     * Executes an operation on the JANUS-server.
     * @param operation Name of the operation
     * @param parameters The parameters of the operation
     * @param parametersPDO TODO
     */
    private callOperationInternal;
}
