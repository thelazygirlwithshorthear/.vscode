import { SDSConnection } from "../sds/SDSConnection";
import { PDIteratorPositions } from "./PDClass";
import { PDObject } from "./PDObject";
export declare class PDIterator {
    private connection;
    private _classNameOrIdOrPDO;
    private _filter;
    /** Number of the iterator */
    private _iterator;
    private _listName;
    private _pdObject?;
    private _sort;
    constructor(connection: SDSConnection);
    get classNameOrIdOrPDO(): string | number | PDObject;
    get filter(): string;
    /**
     * Id of the iterator
     */
    get iteratorNo(): number;
    get listName(): string;
    get pdObject(): PDObject | undefined;
    get sort(): string;
    /**
     * Creates a copy of the current iterator.
     * The position of the iterator will not be copied. This function creates only a new iterator
     * with the same filter and sort options.
     */
    cloneIterator(): Promise<PDIterator>;
    /**
     * Closes the iterator
     * @param iteratorId
     */
    close(): Promise<void>;
    /**
     * Creates a new PDIterator
     * @param classNameOrIdOrPDO Class name of the objects to iterate on
     * @param filter Filter criteria
     * @param sort Sort criteria
     * @param pdObject PDObject the objects are related to
     * @param listName User defined list name to iterate on
     * @returns The id of the iterator
     */
    createIterator(classNameOrIdOrPDO: string | number | PDObject, filter?: string, sort?: string, pdObject?: PDObject, listName?: string): Promise<PDIterator>;
    /**
     * Returns the first hit of the iterator
     */
    first(): Promise<PDObject | null>;
    /**
     * Checks if theres is a next element on the iterator
     */
    hasNext(): Promise<boolean>;
    /**
     * Checks if theres is a previous element on the iterator
     */
    hasPrev(): Promise<boolean>;
    /**
     * Returns the last element of the iterator
     */
    last(): Promise<PDObject | null>;
    /**
     * Returns the next hit of the iterator
     */
    next(): Promise<PDObject | null>;
    /**
     * Returns the previous hit of the iterator
     */
    previous(): Promise<PDObject | null>;
    /**
     * Moves the iterator to a given position
     * @param position
     * @param offset
     */
    seekObject(position: number, offset: PDIteratorPositions): Promise<PDObject | null>;
    /**
     * Returns the number of elements of the PDIterator
     */
    size(): Promise<number>;
}
