"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomOperations = void 0;
const SDSMessage_1 = require("../sds/SDSMessage");
const SDSMessage_2 = require("../sds/SDSMessage");
const SDSRequest_1 = require("../sds/SDSRequest");
const JANUSClass_1 = require("./JANUSClass");
class CustomOperations extends JANUSClass_1.JANUSClass {
    constructor(sdsConnection) {
        super(sdsConnection);
    }
    /**
     * Executes the passed script on the server
     * @param sourceCode The complete script that should be executed on the server.
     * @param scriptParam Array of name - value pairs which describe the parameters as strings.
     */
    runScriptOnServer(sourceCode, scriptParam = []) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const request = new SDSRequest_1.SDSRequest();
                request.operation = SDSMessage_2.Operations.COM_OPERATION;
                request.addParameter(SDSMessage_1.ParameterNames.INDEX, SDSMessage_2.ComOperations.RUN_SCRIPT_ON_SERVER);
                request.addParameter(SDSMessage_1.ParameterNames.PARAMETER, sourceCode);
                request.addParameter(SDSMessage_1.ParameterNames.SOMETHING, scriptParam);
                const response = yield this.connection.sendFullQualified(request);
                const result = response.getParameter(SDSMessage_1.ParameterNames.RETURN_VALUE);
                if (result) {
                    const executionResult = response.getParameter(SDSMessage_1.ParameterNames.PARAMETER);
                    resolve(executionResult);
                }
                else {
                    const errorMessage = yield this.getFormattedError("Unable to execute the passed script");
                    throw new Error(errorMessage);
                }
            }
            catch (err) {
                reject(err);
            }
        }));
    }
}
exports.CustomOperations = CustomOperations;
//# sourceMappingURL=CustomOperations.js.map