"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PDTools = void 0;
const fs = require("fs-extra");
const SDSMessage_1 = require("../sds/SDSMessage");
const SDSRequest_1 = require("../sds/SDSRequest");
const JANUSClass_1 = require("./JANUSClass");
class PDTools extends JANUSClass_1.JANUSClass {
    constructor(sdsConnection) {
        super(sdsConnection);
    }
    receiveFile(remoteFileName, localFileName) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                // Create request for initial communication, get size from server
                const initRequest = new SDSRequest_1.SDSRequest();
                initRequest.operation = SDSMessage_1.Operations.PDTOOLS_TRANSFERFILE;
                initRequest.addParameter(SDSMessage_1.ParameterNames.WRITE, true);
                initRequest.addParameter(SDSMessage_1.ParameterNames.FROM, remoteFileName);
                initRequest.addParameter(SDSMessage_1.ParameterNames.START, false);
                initRequest.addParameter(SDSMessage_1.ParameterNames.FLAG, PDTools.UTF8);
                // Send initial request, request contains the size
                let response = yield this.connection.sendFullQualified(initRequest);
                let result = response.getParameter(SDSMessage_1.ParameterNames.RETURN_VALUE);
                if (result !== 0) {
                    const errorMessage = response.getParameter(SDSMessage_1.ParameterNames.MESSAGE);
                    throw new Error(errorMessage);
                }
                const size = response.getParameter(SDSMessage_1.ParameterNames.SIZE);
                // Create request for start of receiving file
                const startRequest = new SDSRequest_1.SDSRequest();
                startRequest.operation = SDSMessage_1.Operations.PDTOOLS_TRANSFERFILE;
                startRequest.addParameter(SDSMessage_1.ParameterNames.WRITE, true);
                startRequest.addParameter(SDSMessage_1.ParameterNames.FROM, remoteFileName);
                startRequest.addParameter(SDSMessage_1.ParameterNames.START, true);
                startRequest.addParameter(SDSMessage_1.ParameterNames.SIZE, size);
                startRequest.addParameter(SDSMessage_1.ParameterNames.NEWNAME, PDTools.NEW_VERSION);
                startRequest.addParameter(SDSMessage_1.ParameterNames.FLAG, PDTools.UTF8);
                // Send start request and receive the file
                response = yield this.connection.sendStartAndTransferFile(startRequest, localFileName, size, true);
                // check for errors
                if (this.connection.errorMessage.length > 0) {
                    const err = this.connection.errorMessage;
                    this.connection.errorMessage = "";
                    throw new Error(err);
                }
                if (!response.hasParameter(SDSMessage_1.ParameterNames.RETURN_VALUE)) {
                    const errorMessage = yield this.getFormattedError(`Unable to receive file '${remoteFileName}'`, result);
                    throw new Error(errorMessage);
                }
                // get return value
                result = response.getParameter(SDSMessage_1.ParameterNames.RETURN_VALUE);
                if (result === 0) {
                    return resolve();
                }
                else {
                    const errorMessage = yield this.getFormattedError(`Unable to receive file '${remoteFileName}'`, result);
                    throw new Error(errorMessage);
                }
            }
            catch (err) {
                return reject(err);
            }
        }));
    }
    /**
     * @param remoteFileName Path where the file should be stored on the server
     * @param localFileName Local file path to the file to transfer
     * @param newName true indicates that a new filename is generated if remoteFileName already exists
     */
    sendFile(remoteFileName, localFileName, newName = true) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const stats = fs.statSync(localFileName);
                // Create request for initial communication
                const initRequest = new SDSRequest_1.SDSRequest();
                initRequest.operation = SDSMessage_1.Operations.PDTOOLS_TRANSFERFILE;
                initRequest.addParameter(SDSMessage_1.ParameterNames.WRITE, false);
                initRequest.addParameter(SDSMessage_1.ParameterNames.TO, remoteFileName);
                initRequest.addParameter(SDSMessage_1.ParameterNames.START, false);
                initRequest.addParameter(SDSMessage_1.ParameterNames.SIZE, stats.size);
                initRequest.addParameter(SDSMessage_1.ParameterNames.NEWNAME, newName);
                initRequest.addParameter(SDSMessage_1.ParameterNames.FLAG, PDTools.UTF8);
                // Send initial request, response contains filename
                let response = yield this.connection.sendFullQualified(initRequest);
                let result = response.getParameter(SDSMessage_1.ParameterNames.RETURN_VALUE);
                if (result !== 0) {
                    const errorMessage = response.getParameter(SDSMessage_1.ParameterNames.MESSAGE);
                    throw new Error(errorMessage);
                }
                remoteFileName = response.getParameter(SDSMessage_1.ParameterNames.FILENAME);
                // Create request for start of sending file
                const startRequest = new SDSRequest_1.SDSRequest();
                startRequest.operation = SDSMessage_1.Operations.PDTOOLS_TRANSFERFILE;
                startRequest.addParameter(SDSMessage_1.ParameterNames.WRITE, false);
                startRequest.addParameter(SDSMessage_1.ParameterNames.TO, remoteFileName);
                startRequest.addParameter(SDSMessage_1.ParameterNames.START, true);
                startRequest.addParameter(SDSMessage_1.ParameterNames.SIZE, stats.size);
                startRequest.addParameter(SDSMessage_1.ParameterNames.NEWNAME, PDTools.NEW_VERSION);
                startRequest.addParameter(SDSMessage_1.ParameterNames.FLAG, PDTools.UTF8);
                // Send start request and send the file
                response = yield this.connection.sendStartAndTransferFile(startRequest, localFileName, stats.size, false);
                // check for errors
                if (this.connection.errorMessage.length > 0) {
                    const err = this.connection.errorMessage;
                    this.connection.errorMessage = "";
                    throw new Error(err);
                }
                if (!response.hasParameter(SDSMessage_1.ParameterNames.RETURN_VALUE)) {
                    const errorMessage = yield this.getFormattedError(`Unable to send file '${remoteFileName}'`, result);
                    throw new Error(errorMessage);
                }
                // get return value
                result = response.getParameter(SDSMessage_1.ParameterNames.RETURN_VALUE);
                if (result === 0) {
                    resolve(remoteFileName);
                }
                else {
                    const errorMessage = yield this.getFormattedError(`Unable to send file '${remoteFileName}'`, result);
                    throw new Error(errorMessage);
                }
            }
            catch (err) {
                reject(err);
            }
        }));
    }
}
exports.PDTools = PDTools;
PDTools.NEW_VERSION = "true";
PDTools.UTF8 = true;
//# sourceMappingURL=PDTools.js.map