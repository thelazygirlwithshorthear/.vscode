import { SDSConnection } from "../sds/SDSConnection";
import { JANUSClass } from "./JANUSClass";
export declare class PDMeta extends JANUSClass {
    /** Map with the available PDClasses and their class id */
    private pdClassesIdMap;
    /** Map with the available PDClasses and their class id */
    private pdClassesMap;
    constructor(sdsConnection: SDSConnection);
    /**
     * Converts an error code to a error message.
     * This message returns a human-readable string (probably in German) for a given error code.
     * @param errorCode The error code from a previous SDS call.
     * @returns The error message
     */
    errorMessage(errorCode: number): Promise<string>;
    /**
     * Returns the class id of class which the passed relation is connected to
     * @param classId Id of the class (left side of the relation)
     * @param relationName Name of the relation
     */
    getAssocClass(classId: number, relationName: string): Promise<number>;
    /**
     * Returns the relations of the given class
     * @param className Name of the class
     */
    getAssocs(className: string): Promise<string[]>;
    /**
     * Returns the names of all attributes of the given class
     * @param className Name of the class
     * @param flags Defines which attributes should be returned
     */
    getAttributes(className: string, flags: number): Promise<string[]>;
    /**
     * Returns the class name according to the passed id
     * @param classId Id of the class
     * @returns The class name
     */
    getClass(classId: number): Promise<string>;
    /**
     * Returns a list with the name of available PDClasses of the JANUS-application
     * @param abstractClasses Determines if abstract classes should be returned
     * @returns List with the class names
     */
    getClasses(abstractClasses?: boolean): Promise<string[]>;
    /**
     * Resolves the internal class id for the passed class
     * @param className Name of the class
     * @returns Id of the class
     */
    getClassId(className: string): Promise<number>;
    /**
     * Returns a description of the passed class or class member
     * @param longDescription Determines if a long or a short description summary should be returned
     * @param className Name of the class
     * @param attributeOrOperationName Name of a class member or class operation
     * @param lang Language of the description
     */
    getDescription(longDescription: boolean, className: string, attributeOrOperationName?: string, lang?: number): Promise<string>;
    /**
     * Returns the ergonomic label of the class or class member
     * @param classId Id of the class
     * @param memberOrRole Name of the role
     * @param lang Language of the ergName
     */
    getErgname(classId: number, memberOrRole?: string, lang?: number): Promise<string>;
    /**
     * Converts an error code to a error message
     * This message returns a human-readable string (probably in German) for a given error code.
     * @param errorCode The error code from a previous SDS call.
     * @returns The error message
     */
    getString(errorCode: number): Promise<string>;
    /**
     * Initializes internal members. This function will be invoked by the function constructor
     * but it's executed asynchronously. This function bocks the sdsConnection so that no new
     * requests can be send until this function is finished
     */
    initialize(): Promise<void>;
    setLanguage(language: number): Promise<void>;
}
