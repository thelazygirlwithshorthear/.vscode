"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerGui = void 0;
const SDSMessage_1 = require("../sds/SDSMessage");
const SDSRequest_1 = require("../sds/SDSRequest");
const JANUSClass_1 = require("./JANUSClass");
class ServerGui extends JANUSClass_1.JANUSClass {
    constructor(sdsConnection) {
        super(sdsConnection);
    }
    /**
     * Requests the log messages of the server
     * @param lastSeen A transient number that identifies the log lines already retrieved.
     * @returns The log messages of the server since the last seen value and the new last seen value
     */
    getLogMessages(lastSeen = -1) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const request = new SDSRequest_1.SDSRequest();
                request.operation = SDSMessage_1.Operations.SERVER_GUI_OPERATION;
                request.addParameter(SDSMessage_1.ParameterNames.OPERATION_CODE, SDSMessage_1.ServerGuiOperations.CLIENT_GETMESSAGES);
                request.addParameter(SDSMessage_1.ParameterNames.SOMETHING, lastSeen);
                request.addParameter(SDSMessage_1.ParameterNames.CONVERSION, true); // convert tu UTF-8
                const response = yield this.connection.sendFullQualified(request);
                const isUtf8Encoded = response.getParameter(SDSMessage_1.ParameterNames.CONVERSION);
                if (!isUtf8Encoded) {
                    const errorMessage = yield this.getFormattedError("The return value is not utf-8 encoded");
                    reject(new Error(errorMessage));
                }
                const timestampPrefix = "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}: "; // 2018-09-04 14:56:19.193
                const clientPrefix = "Client [0-9]+: ";
                const hostPrefix = "\s?.+[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} "; // admin/::ffff:192.168.6.110 Client 54: contractDev: TranslationTable.*translate...
                // seen prefixes:
                //   - timestampPrefix, hostPrefix, clientPrefix
                //   - timestampPrefix, clientPrefix
                //   - hostPrefix, clientPrefix
                //   - clientPrefix
                //   - noPrefix
                const logMessagesLines = response.getParameter(SDSMessage_1.ParameterNames.RETURN_VALUE)
                    .trim()
                    .replace(new RegExp(`(${timestampPrefix})?(${hostPrefix})?(${clientPrefix})`, "g"), "[tilps]$1$2$3");
                const logMessages = {
                    lastSeen: response.getParameter(SDSMessage_1.ParameterNames.LAST),
                    messages: (logMessagesLines.length === 0)
                        ? []
                        : logMessagesLines.split("[tilps]"),
                };
                resolve(logMessages);
            }
            catch (err) {
                reject(err);
            }
        }));
    }
    listConnectedClients() {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new SDSRequest_1.SDSRequest();
            request.operation = SDSMessage_1.Operations.SERVER_GUI_OPERATION;
            request.addParameter(SDSMessage_1.ParameterNames.OPERATION_CODE, SDSMessage_1.ServerGuiOperations.CLIENT_GETLIST);
            const response = yield this.connection.sendFullQualified(request);
            const clientList = response.getParameter(SDSMessage_1.ParameterNames.VALUE);
            return clientList.map(c => {
                const clientId = c.match(/\): ([0-9]+)/);
                const clientName = c.match(/^([^(]+) \(.+/);
                const hostname = c.match(/\((.+) up since [^)]+\): [0-9]+/);
                const connectedSince = c.match(/(up since [^)]+)\): [0-9]+/);
                return {
                    id: clientId ? parseInt(clientId[1]) : -1,
                    connectedSince: connectedSince ? connectedSince[1] : "-",
                    host: hostname ? hostname[1] : "-",
                    name: clientName ? clientName[1] : "-"
                };
            });
        });
    }
}
exports.ServerGui = ServerGui;
//# sourceMappingURL=ServerGui.js.map