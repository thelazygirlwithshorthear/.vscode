import { Hash } from "../cryptmd5";
import { SDSConnection } from "../sds/SDSConnection";
import { SDSResponse } from "../sds/SDSResponse";
import { SDSSimpleMessage } from "../sds/SDSSimpleMessage";
import { JANUSClass } from "./JANUSClass";
import { PDObject } from "./PDObject";
export declare enum PDIteratorPositions {
    /** Move the iterator relative to the first element */
    FIRST = 1,
    /** Move the iterator relative to the last element */
    LAST = 2,
    /** Move the iterator relative to the current position */
    CURRENT = 3
}
export declare enum LOCK_MODE {
    /** No lock */
    LOCK_NONE = 0,
    /** Object can't be deleted */
    LOCK_DELETE = 1,
    /** Object can't be deleted and relations can't be modified */
    LOCK_RELATION = 2,
    /** Object can't be deleted and attributes can't be modified */
    LOCK_ATTRIBUTES = 3,
    /** Object can't be modified or deleted */
    LOCK_ALL = 4
}
/** Id of a logged in user */
export declare type UserId = number;
export declare class PDClass extends JANUSClass {
    /** Salt for hashing passwords before sending them to the JANUS-server */
    static JANUS_CRYPTMD5_SALT: string;
    static JANUS_CRYPTSHA2_SALT: string;
    static JANUS_UNKNOWN_PASSWORD: number;
    /** Map with the user ids */
    private userIds;
    constructor(sdsConnection: SDSConnection);
    /**
     * Executes an operation on the JANUS-server
     * @todo This function is untested
     * @param operation Name of the operation
     * @param parameters The parameters of the operation
     * @param parametersPDO TODO
     * @returns Execution result of the operation
     */
    callOperation(operation: string, parameters?: string[], pdObjects?: PDObject[]): Promise<SDSResponse | SDSSimpleMessage>;
    /**
     * Executes an operation on the JANUS-server asynchronously
     * @todo This function is untested
     * @param operation Name of the operation
     * @param parameters The parameters of the operation
     * @param parametersPDO TODO
     */
    callOperationAsync(operation: string, parameters?: string[], pdObjects?: PDObject[]): Promise<void>;
    /**
     * Changes the principal which the client is connected to
     * @param principal Name of the principal
     */
    changePrincipal(principal: string): Promise<void>;
    /**
     * Changes the user which is logged in
     * @param login Login of the user
     * @param password password of the user or hashed MD5-value of the password
     * @param principal The principal name where the user is registered (needed if you want to change to a fellow)
     * @returns The id of the user
     */
    changeUser(login: string, password: string | Hash, principal?: string): Promise<UserId>;
    /**
     * Returns the number of PDObjects of the passed class.
     * @param classIdOrName
     * @param listName
     * @param filter
     * @param pdObject
     */
    countObjects(classIdOrName: number | string, listName?: string, filter?: string): Promise<number>;
    createLockAndGroup(pdObject: PDObject, mode: number): Promise<number>;
    /**
     * Creates a principal or modifies the principal, if it already exist
     * @param principal Technical name of the principal
     * @param longName Description of the principal
     * @param users Users which should be assigned to the principal
     */
    createOrChangePrincipal(principal: string, longName: string, users?: string[]): Promise<void>;
    /**
     * Creates or modifies an user
     * Note: If you want to create an user for a principal, execute a 'changePrincipal' before using this function
     * @param login Login of the user
     * @param fullName Full name of the user
     * @param password Password of the user (not crypted). If the user has no password, pass an empty string. If the password of an existing user should not be changed, pass null
     * @param passExpire Expiration date of the password. This term will be restarted after the user changes his password
     * @param accountExpire Expiration date of the user account
     * @returns The id of the user
     * @example
     * await sdsConnection.PDClass.changePrincipal("principal");
     * await sdsConnection.PDClass.createOrChangeUser("user", "full name", "secret password", new Date());
     */
    createOrChangeUser(login: string, fullName: string, password: string, passExpire: Date, accountExpire?: Date): Promise<number>;
    /**
     * Removes an open iterator
     * @param iteratorId
     */
    deleteIterator(iteratorId: number): Promise<void>;
    /**
     * Deletes an object
     * @param object PD Object which should be deleted
     */
    deleteObject(object: PDObject, lockId?: number): Promise<void>;
    /**
     * Logout from server.
     * Do not wait for response, connection will be closed.
     */
    disconnectClient(): Promise<void>;
    /**
     * Returns the numeric id of the principal
     * @param principalName Name (id) of the principal
     */
    getPrincipalId(principalName: string): Promise<number>;
    /**
     * Returns true if the iterator points not to the last element of the iterator
     * @param iteratorId Id of the iterator
     */
    hasNext(iteratorId: number): Promise<boolean>;
    /**
     * Returns true if the iterator points not to the first element of the iterator
     * @param iteratorId Id of the Iterator
     */
    hasPrev(iteratorId: number): Promise<boolean>;
    /**
     * Creates a new PDIterator
     * @param className Class name of the objects to iterate on
     * @param filter Filter criteria
     * @param sort Sort criteria
     * @param pdObject PDObject the objects are related to
     * @param listName User defined list name to iterate on
     * @returns The id of the iterator
     */
    newIterator(className: string | number, filter?: string | null, sort?: string | null, pdObject?: PDObject, listName?: string | null): Promise<number>;
    newLockGroup(): Promise<number>;
    /**
     * Creates a instance of a given class
     * @param className Class name to create an instance of
     * @param isTransactionObject Specifies if the object is a transaction object
     * @param initDefaults Specifies if default values should be initialized
     */
    newObject(className: string, isTransactionObject?: boolean, initDefaults?: boolean): Promise<PDObject>;
    /**
     * Fetches the object by its id
     * @param oId Id of the object
     * @returns The object with the passed id
     */
    ptr(oId: string): Promise<PDObject>;
    /**
     * Moves the iterator to the first element
     * @param iteratorId Id of the iterator
     * @returns The first element of the iterator
     */
    seekFirst(iteratorId: number): Promise<PDObject | null>;
    /**
     * Moves the iterator to the next element
     * @param iteratorId Id of the iterator
     * @returns The next element of the iterator
     */
    seekNext(iteratorId: number): Promise<PDObject | null>;
    /**
     * Moves the iterator to the next element
     * @param iteratorId Id of the iterator
     * @param pdObject Object to place the iterator on
     * @param position New position of the iterator
     * @param offset Determines how to interpret the new position
     * @returns The element the iterator points on
     */
    seekObject(iteratorId: number, pdObject: PDObject | null): Promise<PDObject | null>;
    seekObject(iteratorId: number, position: number, offset: PDIteratorPositions): Promise<PDObject | null>;
    /**
     * Executes an operation on the JANUS-server.
     * @param operation Name of the operation
     * @param parameters The parameters of the operation
     * @param parametersPDO TODO
     */
    private callOperationInternal;
}
