/**
 * Implementation based on libcrypt from Poul-Henning Kamp which can be found here:
 *
 *     https://github.com/freebsd/freebsd/blob/master/lib/libcrypt/crypt-md5.c
 *
 * and therefore governed by its license.
 *
 * Copyright (c) 2003 Poul-Henning Kamp
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Other sources that helped during development can be found here:
 *
 *     https://github.com/joyent/syslinux/blob/master/com32/libutil/crypt-md5.c
 *
 * and here:
 *
 *     https://pythonhosted.org/passlib/lib/passlib.hash.md5_crypt.html
 */
/**
 * A hashed string.
 *
 * The value property always looks like follows.
 *
 *     $id$salt$encrypted
 *
 * Whereas id is always 1, salt is the salt used during encryption and can be empty, and encrypted is the actual
 * computed secret.
 */
export declare class Hash {
    value: string;
    constructor(value: string);
}
/**
 * Mimics POSIX crypt(3) with MD5 instead of DES.
 * @param {string} key A user's typed secret.
 * @param {string} salt The salt used to perturb the algorithm. Can be empty.
 */
export declare function crypt_md5(key: string, salt: string): Hash;
