/// <reference types="node" />
import { PDIteratorPositions } from "../pd-scripting/PDClass";
export declare enum ComOperations {
    GET_CLASSES = 5,
    GET_CLASS_NAME = 10,
    GET_CLASS_ID = 11,
    ERROR_MESSAGE = 17,
    RUN_SCRIPT_ON_SERVER = 42,
    PDMETA_COMDLLCALL = 199
}
export declare enum PDMeta_COMOperations {
    GET_ERGNAME = 1,
    GET_DESCRIPTION = 3,
    GET_ATTRIBUTES = 4,
    GET_ASSOCS = 14,
    GET_ASSOC_CLASS = 15
}
/**
 * Maps the paramter names to a specific type. This list has to be maintenend
 * parallel to the enum "ParameterNames"
 * Note: This list is incomplete. It's possible, that a parameter name has more types than defined here
 */
export interface IParameterNamesTypesMap {
    1: number;
    2: string;
    3: string;
    4: number | string;
    5: string | string[] | boolean | number;
    8: number;
    9: string;
    10: number;
    11: PDIteratorPositions;
    13: number;
    14: number;
    16: number;
    17: string;
    18: boolean;
    19: number;
    20: number;
    21: string;
    22: string;
    25: number;
    26: number;
    29: boolean;
    30: string;
    32: boolean;
    40: number;
    43: string;
    45: string;
    46: number;
    47: number;
    48: string | string[];
    49: string[];
    51: boolean;
    53: boolean;
    54: boolean;
    55: boolean;
    58: string;
    59: string;
    80: string;
    81: number;
    82: string[];
    83: boolean;
    85: number;
    86: string;
    87: string;
    88: number;
    119: any;
}
export declare enum Operations {
    PDCLASS_SEEK = 9,
    PDCLASS_DELETE_ITERATOR = 10,
    PDCLASS_DELETE_OBJECT = 12,
    CHANGE_PRINCIPAL = 203,
    NEW_LOCK_GROUP = 25,
    CHANGE_USER = 27,
    PDOBJECT_START_TRANSACTION = 30,
    PDOBJECT_COMMIT_TRANSACTION = 31,
    PDOBJECT_SETATTRIBUTE = 32,
    PDOBJECT_GETATTRIBUTE = 33,
    PDOBJECT_COUNT_OBJECT = 39,
    PDOBJECT_NEWITERATOR = 40,
    PDOBJECT_SEEK = 42,
    PDOBJECT_CONNECT = 43,
    PDOBJECT_DELETE_ITERATOR = 45,
    PDOBJECT_SYNC = 62,
    PDCLASS_DISCONNECT_CLIENT = 49,
    PDCLASS_PTR = 53,
    PDOBJECT_CALL_SYNC = 55,
    PDOBJECT_CALL_ASYNC = 56,
    PDCLASS_CALL_SYNC = 57,
    PDCLASS_CALL_ASYNC = 58,
    PDMETA_SETLANGUAGE = 59,
    PDCLASS_NEWOBJECT = 63,
    PDCLASS_COUNT_OBJECTS = 68,
    PDCLASS_NEW_ITERATOR = 65,
    PDCLASS_NEWUSER = 80,
    PDOBJECT_CALL_SYNC_PARAMETERIZED = 99,
    PDOBJECT_CALL_ASYNC_PARAMETERIZED = 100,
    PDCLASS_CALL_SYNC_PARAMETERIZED = 101,
    PDCLASS_CALL_ASYNC_PARAMETERIZED = 102,
    PDCLASS_SEEK_NEXT = 110,
    PDCLASS_SEEK_FIRST = 111,
    PDCLASS_HAS_NEXT = 112,
    PDCLASS_HAS_PREVIOUS = 113,
    PDOBJECT_SEEK_NEXT = 114,
    PDOBJECT_SEEK_FIRST = 115,
    PDOBJECT_HAS_NEXT = 116,
    PDOBJECT_HAS_PREV = 117,
    PDCLASS_SEEK_OBJECT = 134,
    PDOBJECT_SEEK_OBJECT = 139,
    PDMETA_GETSTRING = 141,
    PDCLASS_CREATE_LOCK_AND_GROUP = 168,
    /** Used to request the string representation of an error code (PDMeta.getString) or to get the available class names of the JANUS-application (PDMeta.getClasses) */
    COM_OPERATION = 199,
    CREATE_OR_CHANGE_PRINCIPAL = 202,
    PDCLASS_GET_PRINCIPAL_ID = 204,
    /** Operations of the server GUI */
    SERVER_GUI_OPERATION = 209,
    /** PDTools */
    PDTOOLS_TRANSFERFILE = 210
}
/**
 * Names of parameters and return values of server side operations
 */
export declare enum ParameterNames {
    CLIENT_ID = 1,
    CLASS_NAME = 2,
    OTHER_OBJECT_ID = 3,
    VALUE = 4,
    RETURN_VALUE = 5,
    SOMETHING = 8,
    RELATION_NAME = 9,
    ITERATOR_ID = 10,
    ITERATOR_OFFSET = 11,
    INDEX = 13,
    LANGUAGE = 14,
    CLASS_ID = 16,
    LIST_NAME = 17,
    IS_TRANSACTION_OBJECT = 18,
    LOCK_MODE = 19,
    LOCK_GROUP = 20,
    USER = 21,
    PASSWORD = 22,
    LAST = 25,
    ATTRS = 26,
    PROPERTIES = 29,
    SORT_EXPRESSION = 30,
    NEWNAME = 32,
    USER_ID = 40,
    SELECT = 43,
    FULL_NAME = 45,
    PASSWORD_EXPIRE = 46,
    ACCOUNT_EXPIRE = 47,
    PARAMETER = 48,
    PARAMETER_PDO = 49,
    CONVERSION = 51,
    INIT = 53,
    READ = 54,
    WRITE = 55,
    FROM = 58,
    TO = 59,
    PRINCIPAL = 80,
    PRINCIPAL_ID = 81,
    USERS = 82,
    START = 83,
    SIZE = 85,
    MESSAGE = 86,
    FILENAME = 87,
    OPERATION_CODE = 88,
    FLAG = 119
}
export declare enum ServerGuiOperations {
    SILENT_ON = 1,
    SILENT_OFF = 2,
    DEBUG_LEVEL = 3,
    DEBUG_STREAM_ON = 4,
    DEBUG_STREAM_OFF = 5,
    DEBUG_STREAM_GET = 6,
    CLIENT_DISCONNEC = 7,
    CLIENT_MESSAGE = 8,
    CLIENT_GETLIST = 9,
    CLIENT_GETMESSAGES = 10,
    PROFILE_ON = 11,
    PROFILE_OFF = 12,
    REMOTE_SHUTDOWN = 13,
    EXPORT = 14,
    IMPORT = 15,
    IS_DEBUG = 16,
    TEMP_NAME = 17,
    START_JSDEBUG = 18,
    JSRUN = 19,
    JSSTEPINTO = 20,
    JSSTEPOVER = 21,
    JSSETBREAKPOINT = 22,
    JSREMOVEBREAKEPOINT = 23,
    JSGETBREAKPOINTS = 24,
    JSATBREAKPOINT = 25,
    JSGETCLIENTID = 26,
    JSGETSOURCE = 27,
    JSGETLINE = 28,
    SERVICE = 29,
    INEXPORTIMPORT = 30,
    IMPORTPREPARE_START = 31,
    IMPORTPREPARE_END = 32,
    END_JSDEBUG = 33,
    LIC_JSDEBUG = 34,
    EVAL_JSDEBUG = 35,
    EVAL_MULTI_JSDEBUG = 36,
    JSSETBREAKPOINTS = 37,
    DELETEFILE = 38,
    DEFAULTEXPORTIMPORTSECTIONS = 39,
    RUN_SCRIPT = 40
}
export declare enum Types {
    BOOLEAN = 2,
    INT32 = 3,
    DATE = 4,
    STRING = 7,
    OID = 9,
    INT32_LIST = 10,
    STRING_LIST = 11,
    OID_LIST = 12,
    NULL_FLAG = 128
}
/** Layout of a typical message */
export interface IMessageHeader {
    /**
     * First 4-bytes are the length of the entire message in network byte order,
     * including the length itself.
     */
    messageLength: {
        position: 0;
        value: number;
    };
    /**
     * The bytes 4-11 are reserved for a 64-bit data structure called OID.
     * An OID is a unique (application wide) identifier that identifies a single object.
     */
    oId: {
        position: 4;
        value: string;
    };
    /** The last byte of the message head encodes the operation used. See enum Opeartions */
    operation: {
        position: 12;
        value: Operations;
    };
}
/**
 * Base class of the SDSRequest and SDSResponse
 */
export declare abstract class SDSMessage {
    /** Acknowledgment message */
    static ACK: Buffer;
    static ACK_SSL_LEVEL_B: Buffer;
    static ACK_SSL_LEVEL_C: Buffer;
    static ACK_SSL_LEVEL_D: Buffer;
    /** Hello-Message ("magic") to login to the JANUS-server */
    static HELLO: Buffer;
    /** Invalid message (if the request was invalid) */
    static INVALID: Buffer;
    /** Initial size of the created buffer */
    private static INITIAL_BUFFER_SIZE;
    /** Holds the object id to operate on. By default, it's empty */
    protected _oId: string;
    /** Holds the operation to execute on the server side */
    protected _operation: Operations;
    /** Contains the SDSMessage */
    protected buffer: Buffer;
    /** Number of currently buffered bytes */
    protected bufferedLength: number;
    constructor(buffer?: Buffer);
    /**
     * Returns the number of bytes of an utf-8 string plus a 0-terminus.
     * @param {string} str An arbitrary string
     * @returns Number of all code units plus a final '0'.
     */
    static length_term_utf8(str: string): number;
    /**
     * Returns a buffer (the bytes) of an utf-8 string plus a 0-terminus.
     * @param {string} str An arbitrary string
     * @returns A buffer containing all code units plus a final '0'.
     */
    static term_utf8(str: string): Buffer;
    /**
     * Returns the object id the response belongs to
     * @returns The object id the response belongs to
     */
    abstract get oId(): string;
    /**
     * Returns the operation which should be executed
     * @returns Operation which should be executed
     */
    abstract get operation(): Operations;
    toString(): string;
}
