/// <reference types="node" />
import { IParameterNamesTypesMap, Operations, ParameterNames, SDSMessage } from "./SDSMessage";
export declare class SDSResponse extends SDSMessage {
    /** The header of the message */
    private header;
    /** Map with all response parameters of the response */
    private parameters;
    /**
     * Parses the response from the JANUS-server and provides some operation to read the message
     * @param buffer Response buffer returned from the JANUS-server
     */
    constructor(buffer: Buffer, parseBuffer?: boolean);
    /**
     * Returns the object id the response belongs to
     * @returns The object id the response belongs to
     */
    get oId(): string;
    /**
     * Returns the operation which should be executed
     * @returns Operation which should be executed
     */
    get operation(): Operations;
    /**
     * Extracts the passed parameter from the response
     * @param parameterName Name of the parameter
     * @returns The value of the passed parameter
     */
    getParameter<T extends ParameterNames>(parameterName: T): IParameterNamesTypesMap[T];
    /**
     * Determines if a response contains a given parameter
     * @param parameterName Name of the paramter
     * @returns True if the request contains the passed parameter, otherwise false
     */
    hasParameter<T extends ParameterNames>(parameterName: T): boolean;
    /**
     * Determines if the response is a ACK
     * @returns true, if the response is an ACK, otherwise false
     */
    isACK(): boolean;
    /**
     * Determines if the response is a ACK for SSL Level b, c or d
     * @returns true, if the response is an ACK for SSL Level b, c or d otherwise false
     */
    isACK_SSLLevelB(): boolean;
    /**
     * Determines if the request was invalid
     * @returns true, if the response is an ACK, otherwise false
     */
    isInvalid(): boolean;
    toString(): string;
    /**
     * Returns the value of a parameter
     * @param paramIndex Start index of the parameter
     * @param headType Suggested parameter type (needed for validation)
     * @returns The value of the parameter
     */
    private getBooleanParameter;
    /**
     * Returns the value of a parameter
     * @param paramIndex Start index of the parameter
     * @param headType Suggested parameter type (needed for validation)
     * @returns The value of the parameter
     */
    private getIntParameter;
    /**
     * Extracts the object id from the buffer
     */
    private getOIDFromBuffer;
    /**
     * Returns the value of a parameter
     * @param paramIndex Start index of the parameter
     * @param headType Suggested parameter type (needed for validation)
     * @returns The value of the parameter
     */
    private getStringListParameter;
    /**
     * Returns the value of a parameter
     * @param paramIndex Start index of the parameter
     * @param headType Suggested parameter type (needed for validation)
     * @returns The value of the parameter
     */
    private getStringParameter;
    /**
     * Determines the size of the parameter
     * @param paramIndex Index of the parameter in the message buffer
     * @returns Size of the parameter
     */
    private paramLength;
    /**
     * Creates a map with all return parameters of the response
     * @returns Map with all return parameters of the response
     */
    private parseResponseParameters;
}
